# -*- coding: utf-8 -*-
"""Conflict_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L25jlMMuHoJvgxOU717nHuZS_gPglsJ9
"""

import pandas as pd
from google.colab import files

3.   Plot the average duration of the conflict in each year. Compare them between different years

4. Calculate the mean and variances of meaningful variables such as the total length of conflict time in each year

5. Conver to map.

files.upload()

df = pd.read_excel('main_conflict_table.xls')

df

df[['ID', 'Location', 'YEAR']]

df[['ID', 'Location']]

grouped_df = df.groupby( ['ID', 'Location'] )
df1=pd.DataFrame(grouped_df.size().reset_index(name = "Group_Count"))

# import matplotlib.pyplot as plt;
# fig = plt.figure()
# fig.set_size_inches(25, 11,  forward =True)
# df1['Location'].value_counts().plot(kind='bar')
# plt.ylabel('Number of conflicts')
# plt.xlabel('Countries')
# fig.savefig('conflict_location_freq.png')
# files.download( "conflict_location_freq.png" )

import numpy as np
from itertools import chain

# return list from series of comma-separated strings
def chainer(s):
    return list(chain.from_iterable(s.str.split(',')))

# calculate lengths of splits
lens = df['Location'].str.split(',').map(len)

# create new dataframe, repeating or chaining as appropriate
df_new = pd.DataFrame({'ID': np.repeat(df['ID'], lens),
                    'Year': np.repeat(df['YEAR'], lens),
                    'Region': np.repeat(df['Region'], lens),
                    'Int': np.repeat(df['Int'], lens),
                    'SideA': np.repeat(df['SideA'], lens),
                    'SideB': np.repeat(df['SideB'], lens),
                    'Type': np.repeat(df['Type'], lens),
                    'Location': chainer(df['Location'])})

dfLoc = df_new[['Year', 'Location']]
di = {1: "Europe", 2: "Middle East", 3: "Asia", 4: "Africa", 5: "Americas"}
dfReg = df_new[['Year', 'Region']]
dfReg =dfReg.replace({"Region": di})
dfRegInt = df_new[['Int', 'Region']]
dfRegInt =dfRegInt.replace({"Region": di})
dfYearInt = df_new[['Int', 'Year']]
dfRegInt =dfRegInt.replace({"Region": di})
dfLocReg = df_new[['Location', 'Region','Int','Year','Type', 'SideA', 'SideB']]
dfLocReg =dfLocReg.replace({"Region": di})

dfLocReg

grouped= dfLocReg.groupby( ["Year"] )
dfLocRegYear=grouped.Region.value_counts().unstack()
# dfYear=dfYear.fillna(0)
# import matplotlib.pyplot as plt;
# fig = plt.figure()
# fig.set_size_inches(25, 11,  forward =True)
# dfYear[0:10].plot(kind = "bar")

dfReg['Year'].unique()

criteria = [dfReg['Year'].between(1945, 1954), dfReg['Year'].between(1955, 1964), dfReg['Year'].between(1965, 1974),
            dfReg['Year'].between(1975, 1984), dfReg['Year'].between(1985, 1994), dfReg['Year'].between(1995, 2004),
            dfReg['Year'].between(2004, 2008)]
values = dfReg['Year'].unique()
bins = pd.IntervalIndex.from_tuples([(1945, 1955), (1956, 1964), (1965, 1973), (1974, 1983), (1984, 1993),(1993, 2000),(2000, 2008)])

dfLocReg['year_range'] =pd.cut(dfLocReg['Year'], bins)
dfLocReg

grouped= dfReg.groupby( ["year_range"] )
dfYear = grouped.Region.value_counts().unstack()
dfYear=dfYear.fillna(0)

import matplotlib.pyplot as plt;
plt.rc('legend',**{'fontsize':20})
plt.rc('xtick', labelsize=18) 
plt.rc('ytick', labelsize=20) 
plt.rc('axes', labelsize=27)
fig = plt.figure()

fig.set_size_inches(19, 17,  forward =True)
f = dfYear.plot(kind="bar", ax=fig.gca())
f.set_xlabel("Year Range")
f.set_ylabel("Number of Conflicts")
plt.legend(bbox_to_anchor=(0, 1), loc='upper left', ncol=1)
fig.savefig('conflict_region_freq.png')
files.download( "conflict_region_freq.png" )

grouped= dfRegInt.groupby( ["Region"] )
dfRegionInt = grouped.Int.value_counts().unstack()
import matplotlib.pyplot as plt;
plt.rc('legend',**{'fontsize':20})
plt.rc('xtick', labelsize=18) 
plt.rc('ytick', labelsize=20) 
plt.rc('axes', labelsize=27)
fig = plt.figure()

fig.set_size_inches(19, 17,  forward =True)
f = dfRegionInt.plot(kind="bar", ax=fig.gca())
f.set_xlabel("Region")
f.set_ylabel("Number of Conflicts")
plt.legend(bbox_to_anchor=(0, 1), loc='upper left', ncol=1)
fig.savefig('conflict_region_int.png')
files.download( "conflict_region_int.png" )

bins = pd.IntervalIndex.from_tuples([(1945, 1955), (1956, 1964), (1965, 1973), (1974, 1983), (1984, 1993),(1993, 2000),(2000, 2008)])

dfYearInt['year_range'] =pd.cut(dfYearInt['Year'], bins)
dfYearInt



grouped= dfYearInt.groupby( ["year_range"] )
dfRegionInt = grouped.Int.value_counts().unstack()
import matplotlib.pyplot as plt;
plt.rc('legend',**{'fontsize':20})
plt.rc('xtick', labelsize=18) 
plt.rc('ytick', labelsize=20) 
plt.rc('axes', labelsize=27)
fig = plt.figure()

fig.set_size_inches(19, 17,  forward =True)
f = dfRegionInt.plot(kind="bar", ax=fig.gca())
f.set_xlabel("Region")
f.set_ylabel("Number of Conflicts")
plt.legend(bbox_to_anchor=(0, 1), loc='upper left', ncol=1)
# fig.savefig('conflict_region_int.png')
# files.download( "conflict_region_int.png" )

dfLocReg

#Analysis of Europe
europe = dfLocReg['Region'] == "Europe"
dfEurope = dfLocReg[europe]
grouped= dfEurope.groupby( ["year_range"] )
dfEuropeLoc = grouped.Location.value_counts().unstack()
dfEuropeLoc=dfEuropeLoc.fillna(0)
dfEurope['Type'].value_counts()

europe_internal = dfEurope['Type'] == 1
dfEuropeInternal = dfEurope[europe_internal]
dfEuropeInternal
grouped= dfEuropeInternal.groupby( ["year_range"] )
dfEuropeInternalLoc = grouped.Location.value_counts().unstack()
dfEuropeInternalLoc=dfEuropeInternalLoc.fillna(0)
dfEuropeInternalLoc

dfEuropeInternal
grouped= dfEuropeInternal.groupby( ["year_range"] )
dfEuropeInternalInt = grouped.Int.value_counts().unstack()
dfEuropeInternalInt=dfEuropeInternalInt.fillna(0)
dfEuropeInternalInt

import matplotlib.pyplot as plt;
plt.rc('legend',**{'fontsize':20})
plt.rc('xtick', labelsize=18) 
plt.rc('ytick', labelsize=20) 
plt.rc('axes', labelsize=27)
fig = plt.figure()

fig.set_size_inches(25, 23,  forward =True)
f = dfEuropeInternalLoc.plot(kind="bar", ax=fig.gca())
f.set_xlabel("Year Range")
f.set_ylabel("Number of Conflicts")
#plt.legend(bbox_to_anchor=(0, 1), loc='upper left', ncol=1)
#fig.savefig('conflict_internal_europe_countries.png')
#files.download( "conflict_internal_europe_countries.png" )

europe_external1 =  (dfEurope['Type'] == 1)
europe_external2 =  (dfEurope['Type'] == 2)
dfEuropeExternal1 = dfEurope[europe_external1]
dfEuropeExternal2 = dfEurope[europe_external2]
dfEuropeExternal = dfEuropeExternal1.append(dfEuropeExternal2)
dfEuropeExternal
# grouped= dfEuropeExternal.groupby( ["year_range"] )
# dfEuropeExternalLoc = grouped.Location.value_counts().unstack()
# dfEuropeExternalLoc=dfEuropeExternalLoc.fillna(0)
# dfEuropeExternalLoc

#Analysis of Americas
americas = dfLocReg['Region'] == "Americas"
dfAmerica = dfLocReg[americas]
grouped= dfAmerica.groupby( ["year_range"] )
dfAmericaLoc = grouped.Location.value_counts().unstack()
dfAmericaLoc=dfAmericaLoc.fillna(0)
dfAmerica['Type'].value_counts()

americas_internal = dfAmerica['Type'] == 3
dfAmericaInternal = dfAmerica[americas_internal]
dfAmericaInternal
grouped= dfAmericaInternal.groupby( ["year_range"] )
dfAmericaInternalLoc = grouped.Location.value_counts().unstack()
dfAmericaInternalLoc=dfAmericaInternalLoc.fillna(0)
dfAmericaInternalLoc

dfAmericaInternal
grouped= dfAmericaInternal.groupby( ["year_range"] )
dfAmericaInternalInt = grouped.Int.value_counts().unstack()
dfAmericaInternalInt=dfAmericaInternalInt.fillna(0)
dfAmericaInternalInt

import matplotlib.pyplot as plt;
plt.rc('legend',**{'fontsize':20})
plt.rc('xtick', labelsize=18) 
plt.rc('ytick', labelsize=20) 
plt.rc('axes', labelsize=27)
fig = plt.figure()

fig.set_size_inches(25, 23,  forward =True)
f = dfAmericaInternalLoc.plot(kind="bar", ax=fig.gca())
f.set_xlabel("Year Range")
f.set_ylabel("Number of Conflicts")
plt.legend(bbox_to_anchor=(0, 1), loc='upper left', ncol=1)
fig.savefig('conflict_internal_europe_countries.png')
files.download( "conflict_internal_europe_countries.png" )

americas_external1 =  (dfAmerica['Type'] == 1)
americas_external2 =  (dfAmerica['Type'] == 2)
dfAmericaExternal1 = dfAmerica[americas_external1]
dfAmericaExternal2 = dfAmerica[americas_external2]
dfAmericaExternal = dfAmericaExternal1.append(dfAmericaExternal2)
dfAmericaExternal

#Analysis of Asia
asia = dfLocReg['Region'] == "Asia"
dfAsia = dfLocReg[asia]
grouped= dfAsia.groupby( ["year_range"] )
dfAsiaLoc = grouped.Location.value_counts().unstack()
dfAsiaLoc=dfAsiaLoc.fillna(0)
dfAsia['Type'].value_counts()

asia_internal = dfAsia['Type'] == 3
dfAsiaInternal = dfAsia[asia_internal]
dfAsiaInternal
grouped= dfAsiaInternal.groupby( ["year_range"] )
dfAsiaInternalLoc = grouped.Location.value_counts().unstack()
dfAsiaInternalLoc=dfAsiaInternalLoc.fillna(0)
dfAsiaInternalLoc

dfAsiaInternal
grouped= dfAsiaInternal.groupby( ["year_range"] )
dfAsiaInternalInt = grouped.Int.value_counts().unstack()
dfAsiaInternalInt= dfAsiaInternalInt.fillna(0)
dfAsiaInternalInt

import matplotlib.pyplot as plt;
plt.rc('legend',**{'fontsize':20})
plt.rc('xtick', labelsize=18) 
plt.rc('ytick', labelsize=20) 
plt.rc('axes', labelsize=27)
fig = plt.figure()

fig.set_size_inches(25, 23,  forward =True)
f = dfAsiaInternalLoc.plot(kind="bar", ax=fig.gca())
f.set_xlabel("Year Range")
f.set_ylabel("Number of Conflicts")
plt.legend(bbox_to_anchor=(0, 1), loc='upper left', ncol=1)
fig.savefig('conflict_internal_europe_countries.png')
files.download( "conflict_internal_europe_countries.png" )

asia_external1 =  (dfAsia['Type'] == 1)
asia_external2 =  (dfAsia['Type'] == 2)
dfAsiaExternal1 = dfAsia[asia_external1]
dfAsiaExternal2 = dfAsia[asia_external2]
dfAsiaExternal = dfAsiaExternal1.append(dfAsiaExternal2)
dfAsiaExternal["Sides"] = dfAsiaExternal["SideA"]+","+dfAsiaExternal["SideB"]

dfAsiaExternal["Sides"] = dfAsiaExternal["SideA"]+","+dfAsiaExternal["SideB"]

dfAsiaExternal

grouped= dfAsiaExternal.groupby( ["Sides"] )
grouped.head()

dfExtConflictsAsia = pd.DataFrame(grouped.year_range.value_counts().unstack().fillna(0))

dfExtConflictsAsia

import seaborn as sns
fig_sns = sns.heatmap(dfExtConflictsAsia, xticklabels=True, yticklabels=True)
figure = fig_sns.get_figure()
figure.set_size_inches(12, 9,  forward =True)   
figure.savefig('conflict_external_asia_heatmap.png')
# files.download( "conflict_external_asia_heatmap.png")

#Analysis of Africa
africa = dfLocReg['Region'] == "Middle"
dfAfrica = dfLocReg[africa]
grouped= dfAfrica.groupby( ["year_range"] )
dfAfricaLoc = grouped.Location.value_counts().unstack()
dfAfricaLoc=dfAfricaLoc.fillna(0)
dfAfrica['Type'].value_counts()

africa_external1 =  (dfAfrica['Type'] == 1)
africa_external2 =  (dfAfrica['Type'] == 2)
dfAfricaExternal1 = dfAfrica[africa_external1]
dfAfricaExternal2 = dfAfrica[africa_external2]
dfAfricaExternal = dfAfricaExternal1.append(dfAfricaExternal2)
dfAfricaExternal["Sides"] = dfAfricaExternal["SideA"]+","+dfAfricaExternal["SideB"]

dfAfricaExternal
grouped= dfAfricaExternal.groupby( ["Sides"] )
dfExtConflictsAfrica = pd.DataFrame(grouped.year_range.value_counts().unstack().fillna(0))

dfExtConflictsAfrica

import seaborn as sns
fig_sns = sns.heatmap(dfExtConflictsAfrica, xticklabels=True, yticklabels=True)
figure = fig_sns.get_figure()
figure.set_size_inches(18, 10,  forward =True)   
figure.savefig('conflict_external_africa_heatmap.png')
# files.download( "conflict_external_africa_heatmap.png")

dfAfricaInternal
grouped= dfAfricaInternal.groupby( ["year_range"] )
dfAfricaInternalInt = grouped.Int.value_counts().unstack()
dfAfricaInternalInt= dfAfricaInternalInt.fillna(0)
dfAfricaInternalInt

dfAfricaInternal.groupby( ["Location"] )

dfAfricaInternal.Location

#Analysis of ME
me = dfLocReg['Region'] == "Middle East"
dfMe = dfLocReg[me]
grouped= dfMe.groupby( ["year_range"] )
dfMeLoc = grouped.Location.value_counts().unstack()
dfMeLoc=dfMeLoc.fillna(0)
dfMe['Type'].value_counts()

me_internal = dfMe['Type'] == 3
dfMeInternal = dfMe[me_internal]
dfMeInternal
grouped= dfMeInternal.groupby( ["year_range"] )
dfMeInternalLoc = grouped.Location.value_counts().unstack()
dfMeInternalLoc=dfMeInternalLoc.fillna(0)
dfMeInternalLoc

dfMeInternal
grouped= dfMeInternal.groupby( ["year_range"] )
dfMeInternalInt = grouped.Int.value_counts().unstack()
dfMeInternalInt= dfMeInternalInt.fillna(0)
dfMeInternalInt

import matplotlib.pyplot as plt;
plt.rc('legend',**{'fontsize':20})
plt.rc('xtick', labelsize=18) 
plt.rc('ytick', labelsize=20) 
plt.rc('axes', labelsize=27)
fig = plt.figure()

fig.set_size_inches(25, 23,  forward =True)
f = dfMeInternalLoc.plot(kind="bar", ax=fig.gca())
f.set_xlabel("Year Range")
f.set_ylabel("Number of Conflicts")
plt.legend(bbox_to_anchor=(0, 1), loc='upper left', ncol=1)
fig.savefig('conflict_internal_mee_countries.png')
files.download( "conflict_internal_mee_countries.png" )

me_external1 =  (dfMe['Type'] == 1)
me_external2 =  (dfMe['Type'] == 2)
dfMeExternal1 = dfMe[me_external1]
dfMeExternal2 = dfMe[me_external2]
dfMeExternal = dfMeExternal1.append(dfMeExternal2)
dfMeExternal["Sides"] = dfMeExternal["SideA"]+" and "+dfMeExternal["SideB"]

dfMeExternal
grouped= dfMeExternal.groupby( ["Sides"] )
dfExtConflictsMe = pd.DataFrame(grouped.year_range.value_counts().unstack().fillna(0))

import seaborn as sns
fig_sns = sns.heatmap(dfExtConflictsMe, xticklabels=True, yticklabels=True)
figure = fig_sns.get_figure()
figure.set_size_inches(15, 9,  forward =True)   
figure.savefig('conflict_external_me_heatmap.png')

